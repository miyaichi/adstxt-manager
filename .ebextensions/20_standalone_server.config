files:
  "/var/app/current/server.js":
    mode: "000755"
    owner: webapp
    group: webapp
    content: |
      const http = require('http');
      const fs = require('fs');
      const path = require('path');
      
      // Create HTTP server
      const server = http.createServer((req, res) => {
        // Health check endpoint
        if (req.url === '/health' || req.url === '/') {
          res.writeHead(200, { 'Content-Type': 'application/json' });
          return res.end(JSON.stringify({
            status: 'ok',
            message: 'Server is running'
          }));
        }
        
        // Serve static frontend files from build directory
        if (req.url.startsWith('/static') || req.url === '/index.html' || req.url === '/favicon.ico') {
          try {
            const filePath = path.join('/var/app/current/frontend/build', req.url === '/' ? 'index.html' : req.url);
            const contentType = getContentType(filePath);
            
            if (fs.existsSync(filePath)) {
              res.writeHead(200, { 'Content-Type': contentType });
              return fs.createReadStream(filePath).pipe(res);
            }
          } catch (err) {
            console.error('Error serving static file:', err);
          }
        }
        
        // Default response for other routes
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('Ads.txt Manager - Standalone Server');
      });
      
      // Get content type based on file extension
      function getContentType(filePath) {
        const ext = path.extname(filePath);
        switch(ext) {
          case '.html': return 'text/html';
          case '.css': return 'text/css';
          case '.js': return 'application/javascript';
          case '.json': return 'application/json';
          case '.png': return 'image/png';
          case '.jpg': case '.jpeg': return 'image/jpeg';
          case '.svg': return 'image/svg+xml';
          case '.ico': return 'image/x-icon';
          default: return 'text/plain';
        }
      }
      
      // Start server
      const PORT = process.env.PORT || 8080;
      server.listen(PORT, () => {
        console.log(`Standalone server running on port ${PORT}`);
        
        // Log environment variables (useful for debugging)
        console.log('Environment:', {
          NODE_ENV: process.env.NODE_ENV,
          PORT: process.env.PORT,
          DB_HOST: process.env.DB_HOST,
          DB_NAME: process.env.DB_NAME,
          // Mask sensitive information
          DB_USER: process.env.DB_USER ? '***' : undefined,
          DB_PASSWORD: process.env.DB_PASSWORD ? '***' : undefined
        });
      });
  
  "/var/app/current/simplified-procfile":
    mode: "000644"
    owner: webapp
    group: webapp
    content: |
      web: node /var/app/current/server.js

container_commands:
  01_use_simplified_procfile:
    command: "cp /var/app/current/simplified-procfile /var/app/current/Procfile"
  02_build_frontend:
    command: "cd /var/app/current/frontend && npm run build || true"
    ignoreErrors: true