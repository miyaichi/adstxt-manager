files:
  "/var/app/current/diagnostics.js":
    mode: "000755"
    owner: webapp
    group: webapp
    content: |
      const http = require('http');
      const { exec } = require('child_process');
      const dns = require('dns');
      const fs = require('fs');
      
      // Function to run a shell command and return the result
      function runCommand(command) {
        return new Promise((resolve, reject) => {
          exec(command, (error, stdout, stderr) => {
            if (error) {
              resolve(`${command} error: ${error.message}`);
              return;
            }
            if (stderr) {
              resolve(`${command} stderr: ${stderr}`);
              return;
            }
            resolve(`${command} result: ${stdout}`);
          });
        });
      }
      
      // Create an HTTP server for diagnostics
      const server = http.createServer(async (req, res) => {
        if (req.url === '/diagnostics') {
          try {
            console.log('Running diagnostics...');
            
            const results = {
              timestamp: new Date().toISOString(),
              environment: process.env.NODE_ENV || 'not set',
              node_version: process.version,
              env_vars: {
                PORT: process.env.PORT,
                DB_HOST: process.env.DB_HOST,
                DB_NAME: process.env.DB_NAME,
                DB_USER: process.env.DB_USER ? 'REDACTED' : 'not set',
                DB_PASSWORD: process.env.DB_PASSWORD ? 'REDACTED' : 'not set',
                NODE_ENV: process.env.NODE_ENV,
              },
            };
            
            // Check DNS resolution if DB_HOST is set
            if (process.env.DB_HOST) {
              try {
                const dnsLookup = await new Promise((resolve, reject) => {
                  dns.lookup(process.env.DB_HOST, (err, address, family) => {
                    if (err) return resolve(`DNS lookup failed: ${err.message}`);
                    return resolve(`Resolved to: ${address} (IPv${family})`);
                  });
                });
                results.db_host_dns = dnsLookup;
              } catch (dnsError) {
                results.db_host_dns = `DNS resolution error: ${dnsError.message}`;
              }
              
              // Try to ping the host
              results.ping = await runCommand(`ping -c 3 ${process.env.DB_HOST}`);
            }
            
            // Check network interfaces
            results.network_interfaces = await runCommand('ip addr show || ifconfig');
            
            // Check routing table
            results.routing_table = await runCommand('netstat -rn || route -n');
            
            // Check if nginx is running
            results.nginx_status = await runCommand('service nginx status || systemctl status nginx');
            
            // Check loaded environment variables
            const envFile = '/opt/elasticbeanstalk/deployment/env';
            try {
              if (fs.existsSync(envFile)) {
                results.eb_env_vars = await runCommand(`cat ${envFile}`);
              } else {
                results.eb_env_vars = 'Environment file not found';
              }
            } catch (envError) {
              results.eb_env_vars = `Error reading environment file: ${envError.message}`;
            }
            
            // Output results
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify(results, null, 2));
          } catch (error) {
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: error.message }));
          }
        } else {
          res.writeHead(404, { 'Content-Type': 'text/plain' });
          res.end('Not found. Use /diagnostics for troubleshooting information.');
        }
      });
      
      // Start diagnostics server on port 8081 (different from main app)
      server.listen(8081, () => {
        console.log('Diagnostics server running on port 8081');
      });
      
      // Write to a log file
      fs.writeFileSync('/var/log/diagnostics-server-started.log', `Diagnostics server started at ${new Date().toISOString()}\n`);

container_commands:
  01_start_diagnostics:
    command: "node /var/app/current/diagnostics.js > /var/log/diagnostics.log 2>&1 &"
    ignoreErrors: true
  02_log_env:
    command: "env > /var/log/deployment-env.log"
    ignoreErrors: true