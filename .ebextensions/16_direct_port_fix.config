container_commands:
  01_create_direct_pg_config:
    command: |
      # Create a clear and direct PostgreSQL configuration
      # Explicitly set hard-coded values to avoid any issues with CloudFormation and environment variables
      cat > /var/app/staging/backend/pg-config.js << 'EOF'
      // Direct PostgreSQL configuration override
      const fs = require('fs');
      
      // Force specific values to ensure connectivity
      process.env.PGHOST = 'awseb-e-vb3bggm9qp-stack-awsebrdsdatabase-eblwi87ocxx0.cwtgd8gpsmhu.ap-northeast-1.rds.amazonaws.com';
      process.env.PGPORT = '5432'; // Ensure this is a string
      process.env.PGDATABASE = 'adstxt_manager';
      process.env.PGUSER = 'dbadmin';
      process.env.PGPASSWORD = 'H4kKfRTKGBwkCAyM';
      process.env.PG_MAX_POOL_SIZE = '10';
      
      console.log('Direct PostgreSQL configuration applied:');
      console.log('PGHOST:', process.env.PGHOST);
      console.log('PGPORT:', process.env.PGPORT);
      console.log('PGDATABASE:', process.env.PGDATABASE);
      console.log('PGUSER:', process.env.PGUSER);
      console.log('PG_MAX_POOL_SIZE:', process.env.PG_MAX_POOL_SIZE);
      
      // Create a simple health check endpoint
      const http = require('http');
      
      // Start a simple health check server on port 8081
      const healthServer = http.createServer((req, res) => {
        if (req.url === '/health') {
          res.statusCode = 200;
          res.setHeader('Content-Type', 'application/json');
          res.end(JSON.stringify({ status: 'ok', timestamp: new Date().toISOString() }));
        } else {
          res.statusCode = 404;
          res.end('Not Found');
        }
      });
      
      healthServer.listen(8081, () => {
        console.log('Health check server running on port 8081');
      });
      EOF
      
      # Make sure the file is executable
      chmod +x /var/app/staging/backend/pg-config.js

  02_add_health_check_server:
    command: |
      # Create a script to start the health check server
      cat > /var/app/staging/backend/start-health-server.sh << 'EOF'
      #!/bin/bash
      cd /var/app/current/backend
      node pg-config.js > /var/log/health-server.log 2>&1 &
      EOF
      
      chmod +x /var/app/staging/backend/start-health-server.sh
      
  03_add_pg_preload_script:
    command: |
      # Create a hook to run the health server and apply PG config
      mkdir -p /var/app/staging/.platform/hooks/postdeploy
      
      cat > /var/app/staging/.platform/hooks/postdeploy/01_setup_health_server.sh << 'EOF'
      #!/bin/bash
      /var/app/current/backend/start-health-server.sh
      EOF
      
      chmod +x /var/app/staging/.platform/hooks/postdeploy/01_setup_health_server.sh

  04_modify_main_server:
    command: |
      # Create a modified server entry point
      cat > /var/app/staging/backend/patched-server.js << 'EOF'
      // Load explicit configuration
      require('./pg-config'); 
      
      // Now load the actual server
      require('./dist/server');
      EOF
      
      # Update package.json to use our wrapper
      sed -i 's/"start": "node dist\/server.js"/"start": "node patched-server.js"/' /var/app/staging/backend/package.json