option_settings:
  # ベースとなる環境変数
  aws:elasticbeanstalk:application:environment:
    NODE_ENV: production
    PORT: 8080
    
  # プロキシサーバーの設定
  aws:elasticbeanstalk:environment:proxy:
    ProxyServer: nginx
    
  # ヘルスチェック設定
  aws:elasticbeanstalk:environment:process:default:
    HealthCheckPath: /
    Port: 8080
    Protocol: HTTP
    HealthCheckInterval: 15
    HealthCheckTimeout: 5
    HealthyThresholdCount: 3
    UnhealthyThresholdCount: 5

files:
  # フロントエンド専用サーバー
  "/var/app/ondeck/frontend-server.js":
    mode: "000755"
    owner: webapp
    group: webapp
    content: |
      const http = require('http');
      const fs = require('fs');
      const path = require('path');
      
      // SPA用ルート (index.htmlを提供するパス)
      const SPA_ROUTES = [
        '/',
        '/help',
        '/status',
        '/requests',
        '/requests/new'
      ];
      
      // ヘルスチェック用サーバー
      const server = http.createServer((req, res) => {
        console.log(`Request: ${req.method} ${req.url}`);
        
        // ヘルスチェックエンドポイント
        if (req.url === '/health') {
          res.writeHead(200, { 'Content-Type': 'application/json' });
          return res.end(JSON.stringify({
            status: 'ok',
            message: 'Frontend server is running'
          }));
        }
        
        // URLからパスを取得(クエリパラメータを除去)
        let urlPath = req.url.split('?')[0]; 
        let filePath;
        
        // APIリクエストは一時的なレスポンスを返す
        if (urlPath.startsWith('/api/')) {
          res.writeHead(503, { 'Content-Type': 'application/json' });
          return res.end(JSON.stringify({
            status: 'maintenance',
            message: 'The API is currently in maintenance mode. Please try again later.'
          }));
        }
        
        // SPAルートの場合はindex.htmlを提供
        if (SPA_ROUTES.includes(urlPath)) {
          filePath = path.join('/var/app/current/frontend/build', 'index.html');
        } else {
          // 静的ファイルはビルドディレクトリから提供
          filePath = path.join('/var/app/current/frontend/build', urlPath);
        }
        
        // ファイルの存在確認と提供
        fs.access(filePath, fs.constants.R_OK, (err) => {
          if (err) {
            // ファイルが存在しない場合、index.htmlを提供(SPA対応)
            const indexPath = path.join('/var/app/current/frontend/build', 'index.html');
            res.writeHead(200, { 'Content-Type': 'text/html' });
            fs.createReadStream(indexPath).pipe(res);
          } else {
            // コンテンツタイプの設定
            const contentType = getContentType(filePath);
            res.writeHead(200, { 'Content-Type': contentType });
            fs.createReadStream(filePath).pipe(res);
          }
        });
      });
      
      // ファイル拡張子からコンテンツタイプを取得
      function getContentType(filePath) {
        const ext = path.extname(filePath);
        switch(ext) {
          case '.html': return 'text/html';
          case '.css': return 'text/css';
          case '.js': return 'application/javascript';
          case '.json': return 'application/json';
          case '.png': return 'image/png';
          case '.jpg': case '.jpeg': return 'image/jpeg';
          case '.svg': return 'image/svg+xml';
          case '.ico': return 'image/x-icon';
          case '.md': return 'text/markdown';
          default: return 'text/plain';
        }
      }
      
      // サーバー起動
      const PORT = process.env.PORT || 8080;
      server.listen(PORT, () => {
        console.log(`Frontend server running on port ${PORT}`);
      });

  # プロファイルの作成
  "/var/app/ondeck/frontend-procfile":
    mode: "000644"
    owner: webapp
    group: webapp
    content: |
      web: node /var/app/ondeck/frontend-server.js
      
  # Nginxの設定
  "/etc/nginx/conf.d/proxy.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      upstream nodejs {
        server 127.0.0.1:8080;
        keepalive 256;
      }

      server {
        listen 80;
        server_name localhost;

        # gzip圧縮を有効化
        gzip on;
        gzip_comp_level 4;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml text/javascript;

        # ヘルスチェックエンドポイント
        location /health {
          proxy_pass http://nodejs;
          proxy_http_version 1.1;
          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cache_bypass $http_upgrade;
        }

        # ルートロケーション
        location / {
          proxy_pass http://nodejs;
          proxy_http_version 1.1;
          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cache_bypass $http_upgrade;
        }
      }

container_commands:
  01_build_frontend:
    command: |
      cd /var/app/ondeck/frontend && 
      npm ci && 
      npm run build && 
      echo "Frontend build completed at $(date)" > /var/app/ondeck/frontend-build.log
    ignoreErrors: false
  
  02_use_frontend_procfile:
    command: "cp /var/app/ondeck/frontend-procfile /var/app/ondeck/Procfile"