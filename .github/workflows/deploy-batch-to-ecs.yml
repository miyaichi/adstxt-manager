name: Deploy Batch Process to Amazon ECS

on:
  push:
    branches:
      - main
    paths:
      - 'backend/batch/**'
      - '.github/workflows/deploy-batch-to-ecs.yml'
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION != '' && vars.AWS_REGION || 'ap-northeast-1' }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY != '' && vars.ECR_REPOSITORY || 'adstxt-manager-batch' }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER != '' && vars.ECS_CLUSTER || 'adstxt-manager' }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION != '' && vars.ECS_TASK_DEFINITION || 'adstxt-manager-batch' }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE != '' && vars.ECS_SERVICE || 'adstxt-manager-batch' }}
  EVENTS_RULE_NAME: ${{ vars.EVENTS_RULE_NAME != '' && vars.EVENTS_RULE_NAME || 'adstxt-manager-batch' }}
  EVENTS_ROLE_NAME: ${{ vars.EVENTS_ROLE_NAME != '' && vars.EVENTS_ROLE_NAME || 'ecsEventsRole' }}

jobs:
  deploy:
    name: Deploy Batch Process
    runs-on: ubuntu-latest

    steps:
      - name: Set default schedule if not provided
        run: |
          if [ -z "${{ vars.EVENTS_RULE_SCHEDULE }}" ]; then
            echo "EVENTS_RULE_SCHEDULE=cron(0 1 * * ? *)" >> $GITHUB_ENV
          else
            echo "EVENTS_RULE_SCHEDULE=${{ vars.EVENTS_RULE_SCHEDULE }}" >> $GITHUB_ENV
          fi

      # ===== Setup =====
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # ===== ECR Repository Management =====
      - name: Create ECR Repository if needed
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

      # ===== Docker Build & Push =====
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create environment file
        run: |
          echo "DATABASE_TYPE=${{ vars.DB_PROVIDER || vars.DATABASE_TYPE }}" >> backend/.env
          echo "POSTGRES_HOST=${{ secrets.DB_HOST || secrets.POSTGRES_HOST }}" >> backend/.env
          echo "POSTGRES_PORT=${{ secrets.DB_PORT || secrets.POSTGRES_PORT }}" >> backend/.env
          echo "POSTGRES_DB=${{ secrets.DB_NAME || secrets.POSTGRES_DB }}" >> backend/.env
          echo "POSTGRES_USER=${{ secrets.DB_USER || secrets.POSTGRES_USER }}" >> backend/.env
          echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD || secrets.POSTGRES_PASSWORD }}" >> backend/.env
          echo "NODE_ENV=production" >> backend/.env

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Copy .env file to batch directory
          cp backend/.env backend/batch/

          # Build and push
          cd backend/batch
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

          # Cleanup
          rm .env

      # ===== ECS Task Update =====
      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition \
            --region ${{ env.AWS_REGION }} > task-definition.json

      - name: Update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECR_REPOSITORY }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          wait-for-service-stability: true

      # ===== CloudWatch Events Setup =====
      - name: Setup IAM Role for CloudWatch Events
        run: |
          # Check if role exists, create if needed
          if ! aws iam get-role --role-name ${{ env.EVENTS_ROLE_NAME }} --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "Creating IAM role ${{ env.EVENTS_ROLE_NAME }}..."
            
            # Create trust policy for CloudWatch Events
            echo '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "events.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }' > trust-policy.json
            
            # Create policy to allow running ECS tasks
            echo '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ecs:RunTask",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "iam:PassRole",
                  "Resource": "*"
                }
              ]
            }' > role-policy.json
            
            # Create role and attach policy
            aws iam create-role \
              --role-name ${{ env.EVENTS_ROLE_NAME }} \
              --assume-role-policy-document file://trust-policy.json \
              --region ${{ env.AWS_REGION }}
            
            aws iam put-role-policy \
              --role-name ${{ env.EVENTS_ROLE_NAME }} \
              --policy-name EcsEventsPolicy \
              --policy-document file://role-policy.json \
              --region ${{ env.AWS_REGION }}
            
            echo "IAM role ${{ env.EVENTS_ROLE_NAME }} created"
          else
            echo "IAM role ${{ env.EVENTS_ROLE_NAME }} already exists"
          fi

      - name: Setup CloudWatch Events Rule
        run: |
          # Get latest task definition ARN
          TASK_DEF_ARN=$(aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text \
            --region ${{ env.AWS_REGION }})

          # Get AWS Account ID
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          # Create/update CloudWatch Events rule
          if ! aws events describe-rule \
            --name ${{ env.EVENTS_RULE_NAME }} \
            --region ${{ env.AWS_REGION }} 2>/dev/null; then
            
            echo "Creating CloudWatch Events rule ${{ env.EVENTS_RULE_NAME }}..."
            aws events put-rule \
              --name ${{ env.EVENTS_RULE_NAME }} \
              --schedule-expression "$EVENTS_RULE_SCHEDULE" \
              --state ENABLED \
              --description "Scheduled execution of ${{ env.ECS_TASK_DEFINITION }}" \
              --region ${{ env.AWS_REGION }}
          else
            echo "CloudWatch Events rule ${{ env.EVENTS_RULE_NAME }} already exists"
          fi

          # Create target configuration
          echo "[
            {
              \"Id\": \"${{ env.ECR_REPOSITORY }}-task\",
              \"Arn\": \"arn:aws:ecs:${{ env.AWS_REGION }}:$ACCOUNT_ID:cluster/${{ env.ECS_CLUSTER }}\",
              \"RoleArn\": \"arn:aws:iam::$ACCOUNT_ID:role/${{ env.EVENTS_ROLE_NAME }}\",
              \"EcsParameters\": {
                \"TaskDefinitionArn\": \"$TASK_DEF_ARN\",
                \"TaskCount\": 1,
                \"LaunchType\": \"FARGATE\",
                \"NetworkConfiguration\": {
                  \"awsvpcConfiguration\": {
                    \"Subnets\": [\"${{ secrets.AWS_SUBNET_ID }}\"],
                    \"SecurityGroups\": [\"${{ secrets.AWS_SECURITY_GROUP_ID }}\"],
                    \"AssignPublicIp\": \"ENABLED\"
                  }
                }
              }
            }
          ]" > target.json

          # Set rule target
          echo "Setting target for CloudWatch Events rule ${{ env.EVENTS_RULE_NAME }}..."
          aws events put-targets \
            --rule ${{ env.EVENTS_RULE_NAME }} \
            --targets file://target.json \
            --region ${{ env.AWS_REGION }}

          echo "Deployment completed successfully"
