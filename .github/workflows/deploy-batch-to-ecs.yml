name: Deploy Batch Process to Amazon ECS

on:
  push:
    branches:
      - main
    paths:
      - 'backend/batch/**'
      - '.github/workflows/deploy-batch-to-ecs.yml'
  workflow_dispatch:

env:
  # Use GitHub Repository Variables
  # These can be set in the repository settings under Secrets and Variables > Actions > Variables
  AWS_REGION: ${{ vars.AWS_REGION || 'ap-northeast-1' }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY || 'adstxt-manager-batch' }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER || 'adstxt-manager' }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION || 'adstxt-manager-batch' }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE || 'adstxt-manager-batch' }}

jobs:
  deploy:
    name: Deploy Batch Process
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Create ECR Repository if not exists
        run: |
          # Check if repository exists
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
          # Create repository if it doesn't exist
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Create .env file
        run: |
          echo "DATABASE_TYPE=${{ secrets.DATABASE_TYPE }}" > backend/.env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> backend/.env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> backend/.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> backend/.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> backend/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> backend/.env
          echo "NODE_ENV=production" >> backend/.env
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend/batch
          # Copy .env file to batch directory
          cp ../.env .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # Remove .env file
          rm .env
      
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json
      
      - name: Update ECS task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: adstxt-manager-batch
          image: ${{ steps.build-image.outputs.image }}
      
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          wait-for-service-stability: true
      
      - name: Setup ECS roles and scheduled task
        run: |
          TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query 'taskDefinition.taskDefinitionArn' --output text)
          
          # Check if ecsEventsRole exists, create if it doesn't
          ROLE_NAME="ecsEventsRole"
          if ! aws iam get-role --role-name $ROLE_NAME --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "Creating IAM role $ROLE_NAME..."
            
            # Create trust policy file
            cat > trust-policy.json << EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "events.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
            
            # Create role policy file
            cat > role-policy.json << EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "ecs:RunTask",
      "Resource": "*",
      "Condition": {
        "ArnLike": {
          "ecs:cluster": "arn:aws:ecs:*:*:cluster/${{ env.ECS_CLUSTER }}"
        }
      }
    },
    {
      "Effect": "Allow",
      "Action": "iam:PassRole",
      "Resource": "*"
    }
  ]
}
EOF
            
            # Create role
            aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document file://trust-policy.json --region ${{ env.AWS_REGION }}
            
            # Attach policy to role
            aws iam put-role-policy --role-name $ROLE_NAME --policy-name EcsEventsPolicy --policy-document file://role-policy.json --region ${{ env.AWS_REGION }}
            
            echo "IAM role $ROLE_NAME created"
          else
            echo "IAM role $ROLE_NAME already exists"
          fi
          
          # Check if rule exists, create if it doesn't
          RULE_NAME="adstxt-manager-batch-daily"
          TARGET_ID="adstxt-manager-batch-task"
          
          if ! aws events describe-rule --name $RULE_NAME --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "Creating CloudWatch Events rule $RULE_NAME..."
            aws events put-rule \
              --name $RULE_NAME \
              --schedule-expression "cron(0 1 * * ? *)" \
              --state ENABLED \
              --description "Daily execution of adstxt-manager-batch task" \
              --region ${{ env.AWS_REGION }}
          else
            echo "CloudWatch Events rule $RULE_NAME already exists"
          fi
          
          # Build the target JSON with proper escaping and explicit ARNs
          cat > target.json << EOF
[
  {
    "Id": "$TARGET_ID",
    "Arn": "arn:aws:ecs:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:cluster/${{ env.ECS_CLUSTER }}",
    "RoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsEventsRole",
    "EcsParameters": {
      "TaskDefinitionArn": "$TASK_DEF_ARN",
      "TaskCount": 1,
      "LaunchType": "FARGATE",
      "NetworkConfiguration": {
        "awsvpcConfiguration": {
          "Subnets": ["${{ secrets.AWS_SUBNET_ID }}"],
          "SecurityGroups": ["${{ secrets.AWS_SECURITY_GROUP_ID }}"],
          "AssignPublicIp": "ENABLED"
        }
      }
    }
  }
]
EOF
          
          # Check the generated JSON file for debugging
          echo "Generated target JSON:"
          cat target.json
          
          # Use the JSON file for the targets parameter
          echo "Setting target for rule $RULE_NAME..."
          aws events put-targets --rule $RULE_NAME --targets file://target.json --region ${{ env.AWS_REGION }}