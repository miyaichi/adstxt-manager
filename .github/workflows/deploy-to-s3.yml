name: Build and Deploy to S3

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Create frontend environment file for build
        run: |
          # Create frontend .env file for build time
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" > frontend/.env
          echo "REACT_APP_ENVIRONMENT=production" >> frontend/.env
          
          echo "Frontend .env file created for build:"
          cat frontend/.env
          
      - name: Install and build backend
        run: |
          cd backend
          npm install
          npm run build
          
      - name: Install and build frontend
        run: |
          cd frontend
          npm install
          npm run build
      
      - name: Create backend environment file for deployment
        run: |
          # Create backend .env file
          echo "NODE_ENV=production" > backend/.env
          echo "PORT=${{ secrets.PORT || '3001' }}" >> backend/.env
          
          # Database configuration
          echo "DB_PROVIDER=${{ secrets.DB_TYPE || 'postgres' }}" >> backend/.env
          
          # SQLite configuration (if needed)
          if [ "${{ secrets.DB_TYPE }}" = "sqlite" ]; then
            echo "SQLITE_PATH=${{ secrets.SQLITE_PATH || '/app/data/adstxt-manager.db' }}" >> backend/.env
          else
            # PostgreSQL configuration
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> backend/.env
            echo "DB_PORT=${{ secrets.DB_PORT || '5432' }}" >> backend/.env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> backend/.env
            echo "DB_USER=${{ secrets.DB_USER }}" >> backend/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> backend/.env
            echo "DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT || '5432' }}/${{ secrets.DB_NAME }}" >> backend/.env
          fi
          
          # AWS configuration
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> backend/.env
          echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> backend/.env
          
          # CORS configuration
          echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN || secrets.REACT_APP_API_URL }}" >> backend/.env
          
          # JWT configuration
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> backend/.env
          
          # Email configuration
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> backend/.env
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT || '587' }}" >> backend/.env
          echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> backend/.env
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> backend/.env
          
          # Mask sensitive information before printing
          echo "Backend .env file created (with sensitive values masked):"
          cat backend/.env | sed 's/\(DB_PASSWORD=\).*/\1********/' | sed 's/\(JWT_SECRET=\).*/\1********/' | sed 's/\(EMAIL_PASSWORD=\).*/\1********/'
          
          echo "Frontend .env file created:"
          cat frontend/.env
      
      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r backend/dist deploy/
          cp -r frontend/build deploy/public
          cp backend/package.json deploy/
          cp backend/package-lock.json deploy/
          cp Procfile deploy/
          cp backend/.env deploy/
          
          # Copy SQL migration files
          mkdir -p deploy/src/db/migrations
          cp backend/src/db/migrations/*.sql deploy/src/db/migrations/
          
          # Install production dependencies without triggering scripts
          cd deploy
          npm install --omit=dev --no-scripts
          cd ..
          
          # Copy CodeDeploy files
          mkdir -p temp_deploy
          cp -r scripts temp_deploy/
          cp appspec.yml temp_deploy/
          
          # Create a clean directory structure for CodeDeploy
          mkdir -p temp_deploy/deploy
          
          # Copy application files (everything from the deploy directory)
          cp -r deploy/* temp_deploy/deploy/
          
          # Copy .env file to deploy directory
          cp backend/.env temp_deploy/deploy/
          
          # Make sure scripts directory exists and has execute permissions
          chmod +x temp_deploy/scripts/*.sh
          
          # Ensure appspec.yml and scripts are at the root level
          cd temp_deploy
          
          # Create the zip file
          echo "Creating deployment package with the following structure:"
          ls -la
          echo "Deploy directory contents:"
          ls -la deploy/ || echo "deploy directory not found"
          echo "Scripts directory contents:"
          ls -la scripts/ || echo "scripts directory not found"
          
          zip -r ../adstxt-manager.zip .
          
          # Validate zip file contents
          cd ..
          echo "Validating zip file contents:"
          unzip -l adstxt-manager.zip | head -20
        
      # Upload to S3 and deploy only when running on main branch push
      - name: Upload to S3 and trigger deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Check if AWS credentials are available
          if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ] || [ -z "$AWS_DEFAULT_REGION" ] || [ -z "${{ secrets.S3_BUCKET }}" ]; then
            echo "Error: AWS credentials or S3 bucket not configured in GitHub secrets"
            echo "Please set the following secrets in your GitHub repository:"
            echo "- AWS_ACCESS_KEY_ID"
            echo "- AWS_SECRET_ACCESS_KEY"
            echo "- AWS_REGION"
            echo "- S3_BUCKET"
            exit 1
          fi
          
          # Upload to S3
          echo "Uploading deployment package to S3..."
          aws s3 cp adstxt-manager.zip s3://${{ secrets.S3_BUCKET }}/adstxt-manager-${{ github.sha }}.zip
          aws s3 cp adstxt-manager.zip s3://${{ secrets.S3_BUCKET }}/adstxt-manager-latest.zip
          
          # Check if CodeDeploy application and deployment group exist
          if [ -n "${{ secrets.CODEDEPLOY_APP_NAME }}" ] && [ -n "${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }}" ]; then
            echo "Creating CodeDeploy deployment..."
            
            # Create deployment
            DEPLOYMENT_ID=$(aws deploy create-deployment \
              --application-name ${{ secrets.CODEDEPLOY_APP_NAME }} \
              --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }} \
              --s3-location bucket=${{ secrets.S3_BUCKET }},key=adstxt-manager-latest.zip,bundleType=zip \
              --description "Deployment triggered by GitHub Actions - Commit: ${{ github.sha }}" \
              --output text --query 'deploymentId')
            
            if [ -n "$DEPLOYMENT_ID" ]; then
              echo "Deployment created successfully. Deployment ID: $DEPLOYMENT_ID"
              
              # Wait for deployment to complete (optional)
              echo "Waiting for deployment to complete..."
              
              # Add a short delay to ensure AWS recognizes the deployment
              sleep 5
              
              # Poll for deployment status with timeout
              STATUS="IN_PROGRESS"
              TIMEOUT_COUNTER=0
              MAX_ATTEMPTS=30  # 5分のタイムアウト (10秒 x 30)
              
              while [ "$STATUS" == "IN_PROGRESS" ] && [ $TIMEOUT_COUNTER -lt $MAX_ATTEMPTS ]; do
                sleep 10
                STATUS=$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query 'deploymentInfo.status' --output text)
                echo "Current deployment status: $STATUS (Attempt: $TIMEOUT_COUNTER/$MAX_ATTEMPTS)"
                TIMEOUT_COUNTER=$((TIMEOUT_COUNTER+1))
              done
              
              # タイムアウトチェック
              if [ $TIMEOUT_COUNTER -ge $MAX_ATTEMPTS ] && [ "$STATUS" == "IN_PROGRESS" ]; then
                echo "⚠️ Deployment is still in progress but GitHub Action is timing out."
                echo "Check AWS CodeDeploy console for final status: Deployment ID: $DEPLOYMENT_ID"
                exit 0  # エラーを出さずに終了
              fi
              
              if [ "$STATUS" == "SUCCEEDED" ]; then
                echo "✅ Deployment completed successfully!"
              else
                echo "❌ Deployment failed with status: $STATUS"
                aws deploy get-deployment --deployment-id $DEPLOYMENT_ID
                exit 1
              fi
            else
              echo "❌ Failed to create deployment"
              exit 1
            fi
          else
            echo "⚠️ CodeDeploy application or deployment group not specified in secrets."
            echo "Skipping automatic deployment. Upload to S3 completed successfully."
          fi