name: Build and Deploy to EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Create frontend environment file for build
        run: |
          # Create frontend .env file for build time
          echo "REACT_APP_API_URL=${{ vars.REACT_APP_API_URL }}" > frontend/.env
          echo "REACT_APP_ENVIRONMENT=${{ vars.REACT_APP_ENVIRONMENT }}" >> frontend/.env

      - name: Install monorepo dependencies
        run: |
          # Install root dependencies first to set up workspaces
          npm install

      - name: Build ads-txt-validator package
        run: |
          cd packages/ads-txt-validator
          npm install
          npm run build

      - name: Install and build backend
        run: |
          cd backend
          npm install
          npm run build

      - name: Install and build frontend
        run: |
          cd frontend
          npm install
          npm run build

      - name: Create backend environment file
        run: |
          # Create backend .env file
          echo "NODE_ENV=production" > backend/.env
          echo "PORT=${{ vars.PORT || '3001' }}" >> backend/.env
          echo "APP_URL=${{ vars.APP_URL || vars.REACT_APP_API_URL }}" >> backend/.env

          # Save a backup copy of the environment file
          cp backend/.env .env-created-during-workflow

          # Database configuration
          echo "DB_PROVIDER=${{ vars.DB_PROVIDER || 'postgres' }}" >> backend/.env

          # SQLite or PostgreSQL configuration
          if [ "${{ vars.DB_PROVIDER }}" = "sqlite" ]; then
            echo "SQLITE_PATH=${{ secrets.SQLITE_PATH || '/home/ec2-user/adstxt-manager/data/adstxt-manager.db' }}" >> backend/.env
          else
            # Set individual connection parameters using DB_ prefix and generate DATABASE_URL
            # Set database host/endpoint
            if [ -n "${{ secrets.DB_HOST }}" ]; then
              echo "DB_HOST=${{ secrets.DB_HOST }}" >> backend/.env
              echo "PGHOST=${{ secrets.DB_HOST }}" >> backend/.env
              DB_HOST="${{ secrets.DB_HOST }}"
            else
              echo "Warning: No database host specified (DB_HOST)"
              echo "DB_HOST=localhost" >> backend/.env
              echo "PGHOST=localhost" >> backend/.env
              DB_HOST="localhost"
            fi
            
            # Set database port
            if [ -n "${{ secrets.DB_PORT }}" ]; then
              echo "DB_PORT=${{ secrets.DB_PORT }}" >> backend/.env
              echo "PGPORT=${{ secrets.DB_PORT }}" >> backend/.env
              DB_PORT="${{ secrets.DB_PORT }}"
            else
              echo "DB_PORT=5432" >> backend/.env
              echo "PGPORT=5432" >> backend/.env
              DB_PORT="5432"
            fi
            
            # Set database name
            if [ -n "${{ secrets.DB_NAME }}" ]; then
              echo "DB_NAME=${{ secrets.DB_NAME }}" >> backend/.env
              echo "PGDATABASE=${{ secrets.DB_NAME }}" >> backend/.env
              DB_NAME="${{ secrets.DB_NAME }}"
            else
              echo "Warning: No database name specified (DB_NAME)"
              echo "DB_NAME=adstxt_manager" >> backend/.env
              echo "PGDATABASE=adstxt_manager" >> backend/.env
              DB_NAME="adstxt_manager"
            fi
            
            # Set database user
            if [ -n "${{ secrets.DB_USER }}" ]; then
              echo "DB_USER=${{ secrets.DB_USER }}" >> backend/.env
              echo "PGUSER=${{ secrets.DB_USER }}" >> backend/.env
              DB_USER="${{ secrets.DB_USER }}"
            else
              echo "Warning: No database user specified (DB_USER)"
              echo "DB_USER=postgres" >> backend/.env
              echo "PGUSER=postgres" >> backend/.env
              DB_USER="postgres"
            fi
            
            # Set database password
            if [ -n "${{ secrets.DB_PASSWORD }}" ]; then
              echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> backend/.env
              echo "PGPASSWORD=${{ secrets.DB_PASSWORD }}" >> backend/.env
              DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            else
              echo "Warning: No database password specified (DB_PASSWORD)"
              echo "DB_PASSWORD=" >> backend/.env
              echo "PGPASSWORD=" >> backend/.env
              DB_PASSWORD=""
            fi
            
            # Generate DATABASE_URL from individual parameters
            echo "DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}" >> backend/.env
            echo "Generated DATABASE_URL from individual parameters"
            
            # SSL/TLS Configuration for AWS RDS and cloud databases
            echo "DB_SSL_REQUIRED=${{ vars.DB_SSL_REQUIRED || 'true' }}" >> backend/.env
            echo "PG_SSL_REQUIRED=${{ vars.DB_SSL_REQUIRED || 'true' }}" >> backend/.env  # For backward compatibility
            
            echo "DB_SSL_REJECT_UNAUTHORIZED=${{ vars.DB_SSL_REJECT_UNAUTHORIZED || 'false' }}" >> backend/.env
            echo "PG_SSL_REJECT_UNAUTHORIZED=${{ vars.DB_SSL_REJECT_UNAUTHORIZED || 'false' }}" >> backend/.env  # For backward compatibility
            
            # Connection pool settings
            echo "DB_MAX_POOL_SIZE=${{ vars.DB_MAX_POOL_SIZE || '20' }}" >> backend/.env
            echo "PG_MAX_POOL_SIZE=${{ vars.DB_MAX_POOL_SIZE || '20' }}" >> backend/.env  # For backward compatibility
            
            echo "DB_IDLE_TIMEOUT=${{ vars.DB_IDLE_TIMEOUT || '60000' }}" >> backend/.env
            echo "PG_IDLE_TIMEOUT=${{ vars.DB_IDLE_TIMEOUT || '60000' }}" >> backend/.env  # For backward compatibility
            
            echo "DB_CONNECTION_TIMEOUT=${{ vars.DB_CONNECTION_TIMEOUT || '15000' }}" >> backend/.env
            echo "PG_CONNECTION_TIMEOUT=${{ vars.DB_CONNECTION_TIMEOUT || '15000' }}" >> backend/.env  # For backward compatibility
            
            echo "DB_HEALTH_CHECK_INTERVAL=${{ vars.DB_HEALTH_CHECK_INTERVAL || '60000' }}" >> backend/.env
            echo "PG_HEALTH_CHECK_INTERVAL=${{ vars.DB_HEALTH_CHECK_INTERVAL || '60000' }}" >> backend/.env  # For backward compatibility
            
            # Optional SSL Certificate paths (if using custom certificates)
            if [ -n "${{ secrets.DB_SSL_CA }}" ]; then
              echo "DB_SSL_CA=${{ secrets.DB_SSL_CA }}" >> backend/.env
              echo "PG_SSL_CA=${{ secrets.DB_SSL_CA }}" >> backend/.env  # For backward compatibility
            elif [ -n "${{ secrets.PG_SSL_CA }}" ]; then
              echo "DB_SSL_CA=${{ secrets.PG_SSL_CA }}" >> backend/.env
              echo "PG_SSL_CA=${{ secrets.PG_SSL_CA }}" >> backend/.env
            fi
            
            if [ -n "${{ secrets.DB_SSL_CERT }}" ]; then
              echo "DB_SSL_CERT=${{ secrets.DB_SSL_CERT }}" >> backend/.env
              echo "PG_SSL_CERT=${{ secrets.DB_SSL_CERT }}" >> backend/.env  # For backward compatibility
            elif [ -n "${{ secrets.PG_SSL_CERT }}" ]; then
              echo "DB_SSL_CERT=${{ secrets.PG_SSL_CERT }}" >> backend/.env
              echo "PG_SSL_CERT=${{ secrets.PG_SSL_CERT }}" >> backend/.env
            fi
            
            if [ -n "${{ secrets.DB_SSL_KEY }}" ]; then
              echo "DB_SSL_KEY=${{ secrets.DB_SSL_KEY }}" >> backend/.env
              echo "PG_SSL_KEY=${{ secrets.PG_SSL_KEY }}" >> backend/.env  # For backward compatibility
            elif [ -n "${{ secrets.PG_SSL_KEY }}" ]; then
              echo "DB_SSL_KEY=${{ secrets.PG_SSL_KEY }}" >> backend/.env
              echo "PG_SSL_KEY=${{ secrets.PG_SSL_KEY }}" >> backend/.env
            fi
          fi

          # Additional configurations
          echo "CORS_ORIGIN=${{ vars.CORS_ORIGIN || vars.REACT_APP_API_URL }}" >> backend/.env
          echo "ALLOWED_CHROME_EXTENSIONS=${{ vars.ALLOWED_CHROME_EXTENSIONS }}" >> backend/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> backend/.env
          echo "SMTP_HOST=${{ vars.SMTP_HOST }}" >> backend/.env
          echo "SMTP_PORT=${{ vars.SMTP_PORT || '587' }}" >> backend/.env
          echo "SMTP_FROM=${{ vars.SMTP_FROM }}" >> backend/.env
          echo "SMTP_FROM_NAME=${{ vars.SMTP_FROM_NAME }}" >> backend/.env
          echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> backend/.env
          echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> backend/.env
          echo "AWS_REGION=${{ vars.AWS_REGION }}" >> backend/.env
          echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> backend/.env
          
          # OpenSincera API configuration
          echo "OPENSINCERA_API_KEY=${{ secrets.OPENSINCERA_API_KEY }}" >> backend/.env
          echo "OPENSINCERA_BASE_URL=${{ vars.OPENSINCERA_BASE_URL || 'https://open.sincera.io/api' }}" >> backend/.env
          echo "OPENSINCERA_TIMEOUT=${{ vars.OPENSINCERA_TIMEOUT || '10000' }}" >> backend/.env

      - name: Create deployment package
        run: |
          # Create app directories
          mkdir -p deploy
          cp -r backend/dist deploy/
          cp -r frontend/build deploy/public
          cp backend/package.json deploy/
          # Copy package-lock.json if it exists
          if [ -f backend/package-lock.json ]; then
            cp backend/package-lock.json deploy/
          fi
          cp Procfile deploy/
          # Copy packages directory for monorepo dependencies
          cp -r packages deploy/
          # Copy root package.json for workspace configuration
          cp package.json deploy/root-package.json

          # Add API integration settings to .env file
          echo "" >> backend/.env
          echo "# API Integration Settings" >> backend/.env
          echo "API_INTEGRATION_ENABLED=${{ vars.API_INTEGRATION_ENABLED || 'true' }}" >> backend/.env
          echo "API_VALID_KEYS=${{ secrets.API_VALID_KEYS || 'test-api-key-1,test-api-key-2' }}" >> backend/.env

          # Copy the .env file we created above, NOT the local one
          echo "Copying environment file to deployment package..."
          ls -la backend/.env
          cp -v backend/.env deploy/

          # Verify .env contents (excluding sensitive values)
          echo "Verifying .env file contents:"
          grep -v "PASSWORD\|SECRET\|KEY" deploy/.env || echo "No basic config found in .env!"

          # Ensure .env exists in deploy directory
          if [ ! -f deploy/.env ]; then
            echo "ERROR: .env file is missing in deploy directory! Creating from backup."
            cp -v .env-created-during-workflow deploy/.env
            
            # Add API keys to the emergency copy
            echo "" >> deploy/.env
            echo "# API Integration Settings" >> deploy/.env
            echo "API_INTEGRATION_ENABLED=${{ vars.API_INTEGRATION_ENABLED || 'true' }}" >> deploy/.env
            echo "API_VALID_KEYS=${{ secrets.API_VALID_KEYS || 'test-api-key-1,test-api-key-2' }}" >> deploy/.env
          fi

          # Final verification
          echo "Final .env file size: $(wc -c < deploy/.env) bytes"

          # Copy SQL migration files
          mkdir -p deploy/src/db/migrations
          cp backend/src/db/migrations/*.sql deploy/src/db/migrations/


          # Install production dependencies
          cd deploy
          npm install --omit=dev --no-scripts
          cd ..

          # Create CodeDeploy structure
          mkdir -p temp_deploy/deploy
          cp -r scripts temp_deploy/
          cp appspec.yml temp_deploy/
          cp -r deploy/* temp_deploy/deploy/
          chmod +x temp_deploy/scripts/*.sh

          # Ensure .env is included in the final deployment structure
          if [ ! -f temp_deploy/deploy/.env ]; then
            echo "ERROR: .env still missing from deployment structure! Copying directly..."
            cp -v backend/.env temp_deploy/deploy/.env
          else
            echo ".env file confirmed in deployment structure: $(wc -c < temp_deploy/deploy/.env) bytes"
          fi

          # Create zip file
          cd temp_deploy
          echo "Creating zip with the following files:"
          find . -type f | sort
          zip -r ../adstxt-manager.zip .
          cd ..

          # Verify zip contents
          echo "Verifying zip contents..."
          unzip -l adstxt-manager.zip | grep -i .env || echo "WARNING: No .env found in final zip!"

      - name: Deploy to AWS
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
        run: |
          # Check required secrets
          if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ] || [ -z "$AWS_DEFAULT_REGION" ] || [ -z "${{ secrets.S3_BUCKET }}" ]; then
            echo "Error: AWS credentials or S3 bucket not configured"
            exit 1
          fi

          # Upload to S3
          echo "Uploading deployment package to S3..."
          aws s3 cp adstxt-manager.zip s3://${{ secrets.S3_BUCKET }}/adstxt-manager-${{ github.sha }}.zip
          aws s3 cp adstxt-manager.zip s3://${{ secrets.S3_BUCKET }}/adstxt-manager-latest.zip

          # Deploy with CodeDeploy if configured
          if [ -n "${{ vars.CODEDEPLOY_APP_NAME }}" ] && [ -n "${{ vars.CODEDEPLOY_DEPLOYMENT_GROUP }}" ]; then
            echo "Creating CodeDeploy deployment..."
            
            # Create deployment
            DEPLOYMENT_ID=$(aws deploy create-deployment \
              --application-name ${{ vars.CODEDEPLOY_APP_NAME }} \
              --deployment-group-name ${{ vars.CODEDEPLOY_DEPLOYMENT_GROUP }} \
              --s3-location bucket=${{ secrets.S3_BUCKET }},key=adstxt-manager-latest.zip,bundleType=zip \
              --description "Deployment from GitHub Actions - Commit: ${{ github.sha }}" \
              --output text --query 'deploymentId')
            
            if [ -n "$DEPLOYMENT_ID" ]; then
              echo "✅ Deployment initiated with ID: $DEPLOYMENT_ID"
              
              # Check initial status
              sleep 10
              STATUS=$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query 'deploymentInfo.status' --output text)
              echo "Current status: $STATUS"
              
              # Show console link
              echo "📝 Monitor deployment at: https://${{ vars.AWS_REGION }}.console.aws.amazon.com/codesuite/codedeploy/deployments/${DEPLOYMENT_ID}?region=${{ vars.AWS_REGION }}"
              
              # Exit with error only if deployment immediately failed
              if [ "$STATUS" == "FAILED" ]; then
                echo "❌ Deployment failed immediately"
                exit 1
              fi
            else
              echo "❌ Failed to create deployment"
              exit 1
            fi
          else
            echo "⚠️ CodeDeploy not configured. S3 upload completed successfully."
          fi
